import "./domains.cml"

BoundedContext AutomationManagementContext implements AutomationManagementDomain {
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for all automation scenarios inside the operating block"
    Aggregate AutomatedRoomContextAggregate {
        Entity Room {
            aggregateRoot
            - RoomID roomID
            - RoomType roomType
            - RoomData currentEnvironmentData
        }

        ValueObject RoomID {
            String id
        }

        ValueObject RoomData {
            - Temperature temperature
            - Humidity humidity
            - PresenceDetected presenceDetected
            DateTime lastPresenceDetected
            - Lighting lighting
            - List<MedicalTechnology> medicalTechnologiesInUse
        }

        Entity MedicalTechnology {
            - MedicalTechnologyID medicalTechnologyID
            - MedicalTechnologyType medicalTechnologyType
        }

        ValueObject MedicalTechnologyID {
            String id
        }

        ValueObject Temperature {
            double degrees
            - TemperatureUnit temperatureUnit
        }

        ValueObject Humidity {
            double percentage
        }

        ValueObject PresenceDetected {
            boolean presenceDetected
        }

        ValueObject Lighting {
            double value
            - LightUnit lightUnit
        }

        enum TemperatureUnit {
            CELSIUS, FAHRENHEIT
        }

        enum LightUnit {
            LUX, LUMEN
        }

        enum MedicalTechnologyType {
            ENDOSCPE, XRAY
        }

        enum RoomType {
            PRE_OPERATING_ROOM, OPERATING_ROOM
        }
    }
}

BoundedContext SurgicalProcessMonitoringSystemContext implements SurgicalProcessMonitoringSystemDomain {
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for the monitoring system inside the operating block"

    Aggregate SurgicalProcessAggregate {
        Entity SurgicalProcess {
            aggregateRoot
            - SurgeryID surgeryID
            - TaxCode patientTaxCode
            - RoomID operatingRoomID
            - SurgicalProcessState surgicalProcessState
            - SurgicalProcessStep surgicalProcessStep
            DateTime lastUpdateDateTime
        }

        ValueObject SurgeryID {
            String surgeryID
        }

        ValueObject TaxCode {
            String taxCode
        }

        enum SurgicalProcessState {
            PRE_SURGERY, ONGOING_SURGERY, POST_SURGERY, INTERRUPTED
        }

        enum SurgicalProcessStep {
            PATIENT_IN_PREPARATION,
            PATIENT_ON_OPERATING_TABLE,
            ANESTHESIA,
            SURGERY,
            END_OF_SURGERY,
            PATIENT_UNDER_OBSERVATION,
            TERMINATED
        }
    }

    Aggregate PatientVitalSignAggregate {
        Entity PatientVitalSign {
            - SurgeryID surgeryID
            - HeartBeat heartbeat
            - BloodPressure BloodPressure
            - RespiratoryRate respiratoryRate
            - Saturation saturation
            - BodyTemperature bodyTemperature
        }

        ValueObject HeartBeat {
            int bpm
        }
        ValueObject BloodPressure {
            int diastolicBloodPressure
            int systolicBloodPressure
            - BloodPressureUnit bloodPressureUnit
        }
        ValueObject  RespiratoryRate {
            int breathsPerMinute
        }
        ValueObject Saturation {
            int percentage
        }
        ValueObject BodyTemperature {
            double temperature
            - TemperatureUnit temperatureUnit
        }
        enum TemperatureUnit {
            CELSIUS, FAHRENHEIT
        }
        enum BloodPressureUnit {
            MMHG
        }
    }

    Aggregate HealthProfessionalInformationAggregate {
        Entity HealthProfessional {
            aggregateRoot
            - HealthProfessionalID healthProfessionalID
            String name
            String surname
            - HealthProfessionalRole role
            - RoomID roomID
            DateTime lastUpdateDateTime
        }

        enum HealthProfessionalRole {
            SURGEON, 
            NURSE, 
            ANESTHETIST
        }
    }

    Aggregate MedicalTechnologyInformationAggregate {
        Entity MedicalTechnology {
            aggregateRoot
            - MedicalTechnologyID medicalTechnologyID
            - MedicalTechnologyType medicalTechnologyType
            - SurgeryID surgeryID
            boolean inUse
            DateTime lastUpdateDateTime
        }

        ValueObject MedicalTechnologyID {
            String id
        }

        enum MedicalTechnologyType {
            ENDOSCPE, XRAY
        }
    }

    Aggregate ImplantableMedicalDeviceInformationAggregate {
        Entity ImplantableMedicalDevice {
            aggregateRoot
            - ImplantableMedicalDeviceID id
            - ImplantableMedicalDeviceType deviceType
            - SurgeryID surgeryId
            DateTime usageDateTime
        }

        ValueObject ImplantableMedicalDeviceID {
            String code
        }

        enum ImplantableMedicalDeviceType {
            PACE_MAKER,
            CATHETER
        }
    }
}

BoundedContext SurgeryReportContext implements SurgeryReportDomain {
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for the generation of the surgery report"
    Aggregate PatientInformationAggregate {
        Entity PatientInSurgery{
            aggregateRoot
            - SurgeryID SurgeryID
            - TaxCode patient
            - PatientData patientData
            - SurgeryAggregateData patientAggregateData
        }

        ValueObject SurgeryID {
            String surgeryID
        }

        ValueObject RoomID {
            String roomID
        }

        ValueObject SurgeryAggregateData {
            PatientAggregateData preSurgeryAggregateData
            PatientAggregateData ongoinSurgeryAggregateData
            PatientAggregateData postSurgeryAggregateData
        }

        ValueObject PatientAggregateData {
            - HeartBeat heartbeat
            - BloodPressure bloodPressure
            - RespiratoryRate respiratoryRate
            - Saturation saturation
            - BodyTemperature bodyTemperature
        }

        ValueObject PatientData {
            String name
            String surname
            Date birthdate
            - Height height
            - Weight weight
            - BloodGroup bloodGroup
            - Gender gender
            - PhoneNumber phoneNumber
        }

        ValueObject TaxCode {
            String code
        }

        ValueObject Height {
            Double height
            - LengthUnit lengthUnit
        }

        ValueObject Weight {
            Double weight
            - MassUnit massUnit
        }

        ValueObject PhoneNumber {
            String prefix
            String phoneNumber
        }

        enum BloodGroup {
            A_NEGATIVE, 
            A_POSITIVE, 
            B_NEGATIVE, 
            B_POSITIVE, 
            ZERO_NEGATIVE, 
            ZERO_POSITIVE, 
            AB_NEGATIVE, 
            AB_POSITIVE
        }

        enum LengthUnit {
            CENTIMETER, 
            METER
        }

        enum MassUnit {
            KILOGRAM, 
            GRAM
        }

        enum Gender {
            MALE, 
            FEMALE
        }

        ValueObject HeartBeat {
            double averageBpm
            int maxBpm
            int minBpm
        }
        ValueObject BloodPressure {
            double averageDiastolicBloodPressure
            double averageSystolicBloodPressure
            - BloodPressureUnit bloodPressureUnit
        }

        ValueObject  RespiratoryRate {
            double averageBreathsPerMinute
        }

        ValueObject Saturation {
            double averagePercentage
            double minPercentage
            double maxPercentage
        }

        ValueObject BodyTemperature {
            double averageTemperature
            double minTemperature
            double maxTemperature
            - TemperatureUnit temperatureUnit
        }

        enum TemperatureUnit {
            CELSIUS, FAHRENHEIT
        }

        enum BloodPressureUnit {
            MMHG
        }
    }
    Aggregate OperatingRoomInformationAggregate {
        Entity OperatingRoomInformation {
            aggregateRoot
            - SurgeryID surgeryID
            - RoomID operatingRoomID
            - EnvironmentalAggregateData environmentalAggregateData
        }
        ValueObject EnvironmentalAggregateData {
            - Temperature temperature
            - Humidity humidity
        }
        ValueObject Temperature {
            double averageDegrees
            double minDegrees
            double maxDegrees
            - TemperatureUnit temperatureUnit
        }
        ValueObject Humidity {
            double averagePercentage
            double minPercentage
            double maxPercentage
        }
        enum TemperatureUnit {
            CELSIUS, FAHRENHEIT
        }
    }
    Aggregate HealthProfessionalReportAggregate {
        Entity HealthProfessional {
            aggregateRoot
            - HealthProfessionalID healthProfessionalID
            String name
            String surname
            - HealthProfessionalRole role
            - RoomID roomID
            DateTime lastUpdateDateTime
        }

        enum HealthProfessionalRole {
            SURGEON, 
            NURSE, 
            ANESTHETIST
        }
    }

    Aggregate MedicalTechnologyReportAggregate {
        Entity MedicalTechnology {
            aggregateRoot
            - MedicalTechnologyID medicalTechnologyID
            - MedicalTechnologyType medicalTechnologyType
            - SurgeryID surgeryID
            boolean inUse
            DateTime lastUpdateDateTime
        }

        ValueObject MedicalTechnologyID {
            String id
        }

        enum MedicalTechnologyType {
            ENDOSCPE, XRAY
        }
    }

    Aggregate ImplantableMedicalDeviceReportAggregate {
        Entity ImplantableMedicalDevice {
            aggregateRoot
            - ImplantableMedicalDeviceID id
            - ImplantableMedicalDeviceType deviceType
            - SurgeryID surgeryId
            DateTime usageDateTime
        }

        ValueObject ImplantableMedicalDeviceID {
            String code
        }

        enum ImplantableMedicalDeviceType {
            PACE_MAKER,
            CATHETER
        }
    }

    Aggregate SurgicalProcessReportAggregate {
        Entity SurgicalProcess {
            aggregateRoot
            - SurgeryID surgeryID
            - SurgicalProcessState surgicalProcessState
            - SurgicalProcessStep surgicalProcessStep
            DateTime lastUpdateDateTime
        }

        ValueObject SurgeryID {
            String surgeryID
        }

        enum SurgicalProcessState {
            PRE_SURGERY, ONGOING_SURGERY, POST_SURGERY, INTERRUPTED
        }

        enum SurgicalProcessStep {
            PATIENT_IN_PREPARATION,
            PATIENT_ON_OPERATING_TABLE,
            ANESTHESIA,
            SURGERY,
            END_OF_SURGERY,
            PATIENT_UNDER_OBSERVATION,
            TERMINATED
        }
    }
}

BoundedContext OperatingRoomDashboardContext implements OperatingRoomDashboardDomain {
    type = SYSTEM
    domainVisionStatement = "BoundedContext responsible for the dashboard inside each operating room"
    knowledgeLevel = META
}

BoundedContext OperatingBlockDashboardContext implements OperatingBlockDashboardDomain {
    type = SYSTEM
    domainVisionStatement = "BoundedContext responsible for the dashboard that manage the entire operating block"
    knowledgeLevel = META
}


BoundedContext IssueManagementContext implements IssueManagementDomain {
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for creation and visualization of the issue and the relative closure"
    Aggregate IssueAggregate {
        Entity Issue {
            aggregateRoot
            - IssueID issueID
            String title
            String description
            Datetime issueDatetime
            - IssueStatus status
            - RoomID roomID
            - IssuePriority issuePriority
        }
        ValueObject IssueID {
            String id
        }
        enum IssueStatus {
            OPEN, CLOSED
        }
        ValueObject RoomID {
            String id
        }
        enum IssuePriority {
            BASE, MEDIUM, CRITICAL
        }
    }
}

BoundedContext SurgeryBookingSystemIntegrationContext implements SurgeryBookingSystemIntegrationDomain{
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for retrieving the patients' appointments"
    Aggregate SurgeryBookingAggregate {
        Entity SurgeryBooking {
            aggregateRoot
            - SurgeryID id
            DateTime surgeryDatetime
            - SurgeryType surgeryType
            String description
            - PatientTaxCode patientTaxCode
            - HealthProfessionalID assignedSurgeon
        }
        ValueObject SurgeryID {
            String id
        }
        ValueObject SurgeryType {
            String surgeryType
        }
        ValueObject PatientTaxCode {
            String code
        }
        ValueObject HealthProfessionalID {
            String id
        }
    }
}

BoundedContext MedicalInstrumentIntegrationContext implements MedicalInstrumentIntegrationDomain {
    type = FEATURE
    domainVisionStatement = "BoundedContext responsible for retrieving data from existing medical instruments inside the operating room"
    Aggregate TelemetrySystemAggregate {
        Entity TelemetrySystem {
            aggregateRoot
            - TelemetrySystemID id
            - TelemetryData data
            - TaxCode patientTaxCode
        }
        ValueObject TelemetrySystemID {
            String id
        }
        ValueObject TelemetryData {
            - HeartBeat heartbeat
            - BloodPressure bloodPressure
            - RespiratoryRate respiratoryRate
            - Saturation saturation
            - BodyTemperature bodyTemperature
        }
        ValueObject TaxCode {
            String code
        }
        ValueObject HeartBeat {
            int bpm
        }
        ValueObject BloodPressure {
            int diastolicBloodPressure
            int systolicBloodPressure
            - BloodPressureUnit bloodPressureUnit
        }
        ValueObject  RespiratoryRate {
            int breathsPerMinute
        }
        ValueObject Saturation {
            int percentage
        }
        ValueObject BodyTemperature {
            double temperature
            - TemperatureUnit temperatureUnit
        }
        enum TemperatureUnit {
            CELSIUS, FAHRENHEIT
        }
        enum BloodPressureUnit {
            MMHG
        }
    }
}

